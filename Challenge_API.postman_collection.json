{
	"info": {
		"_postman_id": "2110b4c0-453b-4091-84d8-af80dec35420",
		"name": "Challenge_API",
		"description": "**Documentação gerada para o Desafio de API da Serasa Experian**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27635409"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"pm.environment.set(\"token\", response.token);",
									"",
									"pm.test(\"Status code esperado\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_base}}/auth",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			],
			"description": "Este método gera o Token necessário para todas as requisições."
		},
		{
			"name": "Banks",
			"item": [
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code esperado\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Retornou uma lista \", () => {",
									"     pm.response.to.be.ok;  ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Retornar lista completa de bancos cadastrados\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Banco do Brasil\");",
									"    pm.expect(pm.response.text()).to.include(\"Caixa Econômica Federal\");",
									"    pm.expect(pm.response.text()).to.include(\"Banco Santander\");",
									"    pm.expect(pm.response.text()).to.include(\"Banco Itaú\");",
									"    pm.expect(pm.response.text()).to.include(\"Banco Mercantil do Brasil\");",
									"    pm.expect(pm.response.text()).to.include(\"Banco Safra\");",
									"    pm.expect(pm.response.text()).to.include(\"Banco Bradesco\");",
									"    pm.expect(pm.response.text()).to.include(\"Banco Inter\");",
									"    pm.expect(pm.response.text()).to.include(\"Banco Original\");",
									"      ",
									"});",
									"",
									"pm.test(\"Retornar todos os campos esperados\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"    pm.expect(pm.response.text()).to.include(\"banco\");",
									"    pm.expect(pm.response.text()).to.include(\"estadoAtuacao\");",
									"    pm.expect(pm.response.text()).to.include(\"juros\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_base}}/bank",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"bank"
							],
							"query": [
								{
									"key": "estadoAtuacao",
									"value": "SP",
									"disabled": true
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Insert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code esperado\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"pm.test(\"Mensagem de sucesso\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Banco adicionado com sucesso!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"banco\": \"Banco Teste\",\n    \"estadoAtuacao\": \"SC\",\n    \"juros\": \"10,00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/bank",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"bank"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code esperado\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Mensagem de sucesso\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"estadoAtuacao\": \"SP\",\r\n    \"juros\": \"15,00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/bank?id=1",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"bank"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			],
			"description": "No sistema de apresentação de empréstimos bancários faz-se necessário a apresentação dos juros por instituições financeiras e estados de atuação de cada uma."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}